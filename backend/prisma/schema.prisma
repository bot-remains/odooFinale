// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(100)
  email                     String                      @unique @db.VarChar(255)
  password                  String                      @db.VarChar(255)
  avatar                    String?                     @db.VarChar(500)
  role                      String                      @default("user") @db.VarChar(20)
  isActive                  Boolean                     @default(true) @map("is_active")
  isVerified                Boolean                     @default(false) @map("is_verified")
  otpCode                   String?                     @map("otp_code") @db.VarChar(6)
  otpExpiry                 DateTime?                   @map("otp_expiry")
  lastLogin                 DateTime?                   @map("last_login")
  suspendedAt               DateTime?                   @map("suspended_at")
  suspensionReason          String?                     @map("suspension_reason")
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")

  // Relations
  venues                    Venue[]                     @relation("VenueOwner")
  bookings                  Booking[]
  reviews                   Review[]
  notifications             Notification[]
  notificationPreferences   NotificationPreference?
  reviewHelpful             ReviewHelpful[]
  approvedVenues            Venue[]                     @relation("VenueApprovedBy")
  rejectedVenues            Venue[]                     @relation("VenueRejectedBy")
  reports                   Report[]                    @relation("UserReports")
  reviewedReports           Report[]                    @relation("ReviewedReports")

  @@index([email])
  @@index([role])
  @@map("users")
}

model Venue {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  description       String?
  address           String
  location          String    @db.VarChar(255)
  amenities         String[]
  photos            String[]
  rating            Decimal   @default(0.0) @db.Decimal(2, 1)
  totalReviews      Int       @default(0) @map("total_reviews")
  ownerId           Int       @map("owner_id")
  isApproved        Boolean   @default(false) @map("is_approved")
  contactEmail      String?   @map("contact_email")
  contactPhone      String?   @map("contact_phone")
  approvedBy        Int?      @map("approved_by")
  approvedAt        DateTime? @map("approved_at")
  rejectedBy        Int?      @map("rejected_by")
  rejectedAt        DateTime? @map("rejected_at")
  rejectionReason   String?   @map("rejection_reason")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  owner             User      @relation("VenueOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  approver          User?     @relation("VenueApprovedBy", fields: [approvedBy], references: [id])
  rejecter          User?     @relation("VenueRejectedBy", fields: [rejectedBy], references: [id])
  courts            Court[]
  bookings          Booking[]
  reviews           Review[]
  timeSlots         TimeSlot[]
  reports           Report[]  @relation("VenueReports")

  @@index([ownerId])
  @@index([isApproved])
  @@index([location])
  @@index([rating])
  @@map("venues")
}

model Court {
  id            Int       @id @default(autoincrement())
  venueId       Int       @map("venue_id")
  name          String    @db.VarChar(255)
  sportType     String    @map("sport_type") @db.VarChar(100)
  pricePerHour  Decimal   @map("price_per_hour") @db.Decimal(8, 2)
  description   String?
  capacity      Int       @default(10)
  photos        String[]
  amenities     String[]
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  venue         Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  timeSlots     TimeSlot[]

  @@index([venueId])
  @@index([sportType])
  @@index([isActive])
  @@map("courts")
}

model Booking {
  id                    Int           @id @default(autoincrement())
  userId                Int           @map("user_id")
  courtId               Int           @map("court_id")
  venueId               Int           @map("venue_id")
  bookingDate           DateTime      @map("booking_date") @db.Date
  startTime             DateTime      @map("start_time") @db.Time
  endTime               DateTime      @map("end_time") @db.Time
  totalAmount           Decimal       @map("total_amount") @db.Decimal(10, 2)
  status                String        @default("confirmed") @db.VarChar(20)
  paymentStatus         String        @default("pending") @map("payment_status") @db.VarChar(20)
  paymentId             String?       @map("payment_id") @db.VarChar(255)
  notes                 String?
  reviewed              Boolean       @default(false)
  confirmedAt           DateTime?     @map("confirmed_at")
  rescheduledAt         DateTime?     @map("rescheduled_at")
  cancellationReason    String?       @map("cancellation_reason")
  cancelledAt           DateTime?     @map("cancelled_at")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  court                 Court         @relation(fields: [courtId], references: [id], onDelete: Cascade)
  venue                 Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade)
  paymentIntent         PaymentIntent?
  refunds               Refund[]
  review                Review?

  @@index([userId])
  @@index([courtId])
  @@index([venueId])
  @@index([bookingDate])
  @@index([status])
  @@map("bookings")
}

model TimeSlot {
  id          Int      @id @default(autoincrement())
  venueId     Int      @map("venue_id")
  courtId     Int      @map("court_id")
  dayOfWeek   Int      @map("day_of_week")
  startTime   DateTime @map("start_time") @db.Time
  endTime     DateTime @map("end_time") @db.Time
  isAvailable Boolean  @default(true) @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  venue       Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  court       Court    @relation(fields: [courtId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@index([courtId])
  @@index([dayOfWeek])
  @@map("time_slots")
}

model Review {
  id            Int             @id @default(autoincrement())
  userId        Int             @map("user_id")
  venueId       Int             @map("venue_id")
  bookingId     Int?            @unique @map("booking_id")
  rating        Int             @db.SmallInt
  comment       String?
  helpfulCount  Int             @default(0) @map("helpful_count")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  venue         Venue           @relation(fields: [venueId], references: [id], onDelete: Cascade)
  booking       Booking?        @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  helpfulVotes  ReviewHelpful[]

  @@index([venueId])
  @@index([userId])
  @@index([rating])
  @@map("reviews")
}

model ReviewHelpful {
  id        Int      @id @default(autoincrement())
  reviewId  Int      @map("review_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@index([userId])
  @@map("review_helpful")
}

model PaymentIntent {
  id            String       @id @db.VarChar(255)
  bookingId     Int          @unique @map("booking_id")
  amount        Int
  currency      String       @default("usd") @db.VarChar(10)
  status        String       @db.VarChar(50)
  clientSecret  String?      @map("client_secret") @db.VarChar(255)
  paidAt        DateTime?    @map("paid_at")
  createdAt     DateTime     @default(now()) @map("created_at")

  // Relations
  booking       Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  refunds       Refund[]

  @@index([bookingId])
  @@index([status])
  @@map("payment_intents")
}

model Refund {
  id               String         @id @db.VarChar(255)
  bookingId        Int            @map("booking_id")
  paymentIntentId  String         @map("payment_intent_id") @db.VarChar(255)
  amount           Decimal        @db.Decimal(10, 2)
  reason           String?
  status           String         @db.VarChar(50)
  processedAt      DateTime?      @map("processed_at")
  createdAt        DateTime       @default(now()) @map("created_at")

  // Relations
  booking          Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  paymentIntent    PaymentIntent  @relation(fields: [paymentIntentId], references: [id])

  @@index([bookingId])
  @@index([paymentIntentId])
  @@map("refunds")
}

model Notification {
  id          Int              @id @default(autoincrement())
  userId      Int              @map("user_id")
  type        String           @db.VarChar(50)
  title       String           @db.VarChar(255)
  message     String
  relatedId   Int?             @map("related_id")
  isRead      Boolean          @default(false) @map("is_read")
  readAt      DateTime?        @map("read_at")
  createdAt   DateTime         @default(now()) @map("created_at")

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique @map("user_id")
  emailBookings     Boolean  @default(true) @map("email_bookings")
  emailReminders    Boolean  @default(true) @map("email_reminders")
  emailPromotions   Boolean  @default(false) @map("email_promotions")
  pushBookings      Boolean  @default(true) @map("push_bookings")
  pushReminders     Boolean  @default(true) @map("push_reminders")
  pushPromotions    Boolean  @default(false) @map("push_promotions")
  smsBookings       Boolean  @default(false) @map("sms_bookings")
  smsReminders      Boolean  @default(true) @map("sms_reminders")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notification_preferences")
}

model Report {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  venueId     Int      @map("venue_id")
  reason      String   @db.VarChar(50) // 'inappropriate_content', 'false_information', 'poor_service', 'safety_concerns', 'other'
  description String   @db.Text
  status      String   @default("pending") @db.VarChar(20) // 'pending', 'reviewed', 'resolved', 'dismissed'
  adminNotes  String?  @map("admin_notes") @db.Text
  reviewedBy  Int?     @map("reviewed_by")
  reviewedAt  DateTime? @map("reviewed_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation("UserReports", fields: [userId], references: [id], onDelete: Cascade)
  venue       Venue    @relation("VenueReports", fields: [venueId], references: [id], onDelete: Cascade)
  reviewer    User?    @relation("ReviewedReports", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([venueId])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}
